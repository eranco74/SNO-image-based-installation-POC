## Image Based Installation
IBI_VM_NAME ?= ibi
IBI_VM_IP ?= 192.168.127.74
IBI_VM_MAC ?= fa:ba:da:1b:11:b1
IBI_VM_RAM_MB ?= $(RAM_MB)
IBI_VM_CPUS ?= $(CPU_CORE)
IBI_DISK_SIZE ?= $(DISK_GB)
IBI_NET_NAME ?= $(NET_TARGET_NAME)
IBI_DOMAIN ?= $(NET_TARGET_DOMAIN)
IBI_CLUSTER_NAME ?= $(IBI_VM_NAME)
IBI_HOSTNAME ?= $(IBI_VM_NAME)
IBI_INSTALLATION_DISK ?= /dev/vda
IBI_WORK_DIR ?= ibi-iso-work-dir
IBI_KUBECONFIG=kubeconfig.ibi

ifeq ($(PRECACHE_MODE),directory)
	IBI_EXTRA_PARTITION_START ?= use_directory
else
	IBI_EXTRA_PARTITION_START ?= -40G
endif

IB_CLI = ./bin/ib-cli
# Image that holds ib-cli. Can be different than LCA_IMAGE mostly for testing purposes
IB_IMAGE ?= $(LCA_IMAGE)

IBI_RHCOS_ISO_PATH = $(LIBVIRT_IMAGE_PATH)/rhcos-$(IBI_VM_NAME).iso
IBI_CONFIG_DIR = ibi-config
IBI_CLUSTER_CONFIG_TEMPLATE = ibi-manifest.template
IBI_CLUSTER_CONFIG_PATH = $(IBI_CONFIG_DIR)/cluster-configuration/manifest.json
IBI_CLUSTER_CONFIG_MANIFESTS = $(IBI_CONFIG_DIR)/cluster-configuration/manifests

.PHONY: ibi
ibi: ibi-iso ibi-vm ibi-logs ibi-config.iso ibi-attach-config.iso ibi-reboot-wait

.PHONY: $(IB_CLI)
$(IB_CLI):
	mkdir -p bin
	podman pull $(IB_IMAGE)
	podman run -it -v $(shell pwd):/data:Z --rm --entrypoint cp $(IB_IMAGE) /usr/local/bin/ib-cli ./data/bin/

.PHONY: ibi-iso
ibi-iso: $(IB_CLI) $(SSH_KEY_PRIV_PATH) credentials/pull-secret.json credentials/backup-secret.json ## Create ISO to be used in IBI
	mkdir -p $(IBI_WORK_DIR)
	$(IB_CLI) create-iso \
		--installation-disk $(IBI_INSTALLATION_DISK) \
		--extra-partition-start $(IBI_EXTRA_PARTITION_START) \
		--lca-image $(LCA_IMAGE) \
		--seed-image $(SEED_IMAGE) \
		--seed-version $(SEED_VERSION) \
		--auth-file credentials/backup-secret.json \
		--pullsecret-file credentials/pull-secret.json \
		--ssh-public-key-file $(SSH_KEY_PUB_PATH) \
		--dir ./$(IBI_WORK_DIR)
	sudo cp ./$(IBI_WORK_DIR)/rhcos-ibi.iso "$(IBI_RHCOS_ISO_PATH)"
	sudo chmod a+r "$(IBI_RHCOS_ISO_PATH)"

.PHONY: ibi-iso-clean
ibi-iso-clean:
	-sudo rm -rf $(IBI_RHCOS_ISO_PATH) $(IBI_WORK_DIR) $(IB_CLI)

# Configure dhcp and dns for host
.PHONY: host-net-config
host-net-config:
	HOST_IP=$(IBI_VM_IP) \
	CLUSTER_NAME=$(IBI_CLUSTER_NAME) \
	BASE_DOMAIN=$(IBI_DOMAIN) \
	NET_NAME=$(IBI_NET_NAME) \
	HOST_NAME=$(IBI_VM_NAME) \
	HOST_MAC=$(IBI_VM_MAC) \
	$(SNO_DIR)/host-net-config.sh

.PHONY: ibi-vm
ibi-vm: target-network host-net-config ## Provision IBI VM
	RHCOS_ISO=$(IBI_RHCOS_ISO_PATH) \
	VM_NAME=$(IBI_VM_NAME) \
	NET_NAME=$(IBI_NET_NAME) \
	DISK_GB=$(IBI_DISK_SIZE) \
	CPU_CORE=$(IBI_VM_CPUS) \
	HOST_MAC=$(IBI_VM_MAC) \
	RAM_MB=$(IBI_VM_RAM_MB) \
	$(SNO_DIR)/virt-install-sno-iso-ign.sh

.PHONY: ibi-vm-remove
ibi-vm-remove: VM_NAME=$(IBI_VM_NAME)
ibi-vm-remove: vm-remove ## Remove IBI VM and the storage associated with it

.PHONY: logs
ibi-logs: ## Show logs of the IBI installation process
	echo "Waiting for $(IBI_VM_NAME) to be accessible"
	@until ssh $(SSH_FLAGS) core@$(IBI_VM_IP) true; do sleep 5; echo -n .; done; echo
	ssh $(SSH_FLAGS) core@$(IBI_VM_IP) "sudo journalctl -flu install-rhcos-and-restore-seed.service | stdbuf -o0 -e0 awk '{print \$$0 } /Finished SNO Image Based Installation./ { exit }'"

.PHONY: ibi-certs
ibi-certs:
	@echo "Generating new certificates"
	rm -rf ./ibi-certs $(IBI_KUBECONFIG)
	./ibi/generate_certs.sh $(IBI_CLUSTER_NAME) $(IBI_DOMAIN)

.PHONY: $(IBI_CLUSTER_CONFIG_PATH)
$(IBI_CLUSTER_CONFIG_PATH): ibi-certs credentials/pull-secret.json
	mkdir -p $(shell dirname $(IBI_CLUSTER_CONFIG_PATH))
	rm -rf $@
	$(info Generating $(IBI_CLUSTER_CONFIG_PATH))
	@NODE_IP=$(shell $(virsh) domifaddr ${IBI_VM_NAME} | grep ipv4 | awk -F " " '{print $$4}' | cut -d'/' -f1) \
	CLUSTER_ID=$(shell uuidgen) \
	VM_NAME=$(IBI_VM_NAME) \
	SEED_VERSION=$(SEED_VERSION) \
	CLUSTER_NAME=$(IBI_CLUSTER_NAME) \
	DOMAIN=$(IBI_DOMAIN) \
	HOSTNAME=$(IBI_HOSTNAME) \
	SSH_KEY="$(shell cat $(SSH_KEY_PUB_PATH))" \
	PULL_SECRET='$(shell jq -R . credentials/pull-secret.json)' \
	LOCALHOST_SIGNER_PRIVATE_KEY="$(shell awk 'NF {sub(/\r/, ""); printf "%s\\n",$$0;}' ibi-certs/localhost-serving-signer-key.pem)" \
	SERVICE_NETWORK_SIGNER_PRIVATE_KEY="$(shell awk 'NF {sub(/\r/, ""); printf "%s\\n",$$0;}' ibi-certs/service-network-serving-signer-key.pem)" \
	LOADBALANCER_SIGNER_PRIVATE_KEY="$(shell awk 'NF {sub(/\r/, ""); printf "%s\\n",$$0;}' ibi-certs/loadbalancer-serving-signer-key.pem)" \
	ADMIN_CA_CERT="$(shell awk 'NF {sub(/\r/, ""); printf "%s\\n",$$0;}' ibi-certs/admin-kubeconfig-signer.crt)" \
	INGRESS_CA_KEY="$(shell awk 'NF {sub(/\r/, ""); printf "%s\\n",$$0;}' ibi-certs/ingresskey-ingress-operator-key.pem)" \
	envsubst < $(IBI_CLUSTER_CONFIG_TEMPLATE) > $@

.PHONY: $(IBI_CLUSTER_CONFIG_MANIFESTS)
$(IBI_CLUSTER_CONFIG_MANIFESTS):
	mkdir -p $(IBI_CLUSTER_CONFIG_MANIFESTS)

.PHONY: ibi-config
ibi-config: $(IBI_CLUSTER_CONFIG_PATH) $(IBI_CLUSTER_CONFIG_MANIFESTS)

.PHONY: ibi-config.iso
ibi-config.iso: ibi-config ## Create ibi-config.iso
	mkisofs -o $@ -R -V "cluster-config" $(IBI_CONFIG_DIR)
	sudo cp $@ $(LIBVIRT_IMAGE_PATH)

.PHONY: ibi-attach-config.iso
ibi-attach-config.iso: ## Attach ibi-config.iso file to IBI VM
	$(virsh) change-media $(IBI_VM_NAME) --config sda $(LIBVIRT_IMAGE_PATH)/ibi-config.iso

.PHONY: ibi-reboot
ibi-reboot: ## Reboot ibi VM
	$(virsh) reboot $(IBI_VM_NAME)

.PHONY: ibi-reboot-wait
ibi-reboot-wait: SNO_KUBECONFIG=$(IBI_KUBECONFIG)
ibi-reboot-wait: ibi-reboot wait-for-install-complete

# Delete generated files
.PHONY: ibi-clean
ibi-clean: ibi-vm-clean
	rm -fr credentials ibi-certs ibi-config/certs ibi-config.iso ibi-config/cluster-configuration/manifest.json $(IBI_KUBECONFIG) ibi-ignition.json rhcos-ibi.iso rhcos-live.x86_64.iso

# So vim treats this file as a makefile
# vim: set filetype=make:
