## Image Based Installation
IBI_VM_NAME ?= ibi
IBI_VM_IP ?= 192.168.127.74
IBI_VM_NETWORK ?= 192.168.127.0/24
IBI_VM_MAC ?= fa:ba:da:1b:11:b1
IBI_VM_RAM_MB ?= $(RAM_MB)
IBI_VM_CPUS ?= $(CPU_CORE)
IBI_DISK_SIZE ?= $(DISK_GB)
IBI_NET_NAME ?= $(NET_TARGET_NAME)
IBI_DOMAIN ?= $(NET_TARGET_DOMAIN)
IBI_CLUSTER_NAME ?= $(IBI_VM_NAME)
IBI_HOSTNAME ?= $(IBI_VM_NAME)
IBI_INSTALLATION_DISK ?= /dev/vda
IBI_WORK_DIR ?= ibi-iso-work-dir
IBI_INSTALL_CONFIG ?= $(IBI_WORK_DIR)/install-config.yaml
IBI_KUBECONFIG = $(IBI_WORK_DIR)/auth/kubeconfig

# We will be using mresvanis repo until the imagebased command is present in openshift/installer's repo
OPENSHIFT_INSTALLER_REPO ?= https://github.com/mresvanis/installer
OPENSHIFT_INSTALLER_BRANCH ?= add-config-iso-cluster-configuration
# TODO: Once https://github.com/openshift/installer/pull/8514 is merged, delete the two previous lines, and uncomment the following two :)
# OPENSHIFT_INSTALLER_REPO ?= https://github.com/openshift/installer
# OPENSHIFT_INSTALLER_BRANCH ?= image-based-installer

OPENSHIFT_INSTALLER_DIR ?= openshift-installer
OPENSHIFT_INSTALLER_BIN ?= $(OPENSHIFT_INSTALLER_DIR)/bin/openshift-install

# Used to populate releaseRegistry in imagebased-config.yaml
IBI_RELEASE_REGISTRY ?= quay.io

IBI_INSTALL_ISO_TEMPLATE = image-based-install-iso-template.yaml
IMAGEBASED_CONFIG_TEMPLATE = imagebased-config-template.yaml
ifdef DHCP
    IMAGEBASED_CONFIG_TEMPLATE = imagebased-config-template-dhcp.yaml
endif

ifeq ($(PRECACHE_MODE),directory)
	IBI_EXTRA_PARTITION_START ?= use_directory
else
	IBI_EXTRA_PARTITION_START ?= -40G
endif

IB_CLI = ./bin/ib-cli
# Image that holds ib-cli. Can be different than LCA_IMAGE mostly for testing purposes
IB_IMAGE ?= $(LCA_IMAGE)

IBI_RHCOS_LIVE_ISO_URL ?= https://mirror.openshift.com/pub/openshift-v4/amd64/dependencies/rhcos/latest/rhcos-live.x86_64.iso
IBI_RHCOS_ISO_PATH = $(LIBVIRT_IMAGE_PATH)/rhcos-$(IBI_VM_NAME).iso

.PHONY: ibi
ibi: ibi-iso ibi-vm ibi-logs build-openshift-install imagebasedconfig.iso ibi-attach-config.iso ibi-reboot wait-for-ibi

.PHONY: $(IB_CLI)
$(IB_CLI):
	mkdir -p bin
	podman pull $(IB_IMAGE)
	podman run -it -v $(shell pwd):/data:Z --rm --entrypoint cp $(IB_IMAGE) /usr/local/bin/ib-cli ./data/bin/

.PHONY: openshift-installer
openshift-installer:
	@if [ -d $@ ]; then \
		git -C $@ checkout -B $(OPENSHIFT_INSTALLER_BRANCH);\
		git -C $@ pull;\
	else \
		git clone $(OPENSHIFT_INSTALLER_REPO) --branch $(OPENSHIFT_INSTALLER_BRANCH) $(OPENSHIFT_INSTALLER_DIR);\
	fi

.PHONY: ibi-iso
ibi-iso: $(IB_CLI) $(SSH_KEY_PRIV_PATH) credentials/pull-secret.json image-based-install-iso.yaml ## Create ISO to be used in IBI
	mkdir -p $(IBI_WORK_DIR)
	$(IB_CLI) create-iso --dir $(IBI_WORK_DIR)
	sudo cp $(IBI_WORK_DIR)/rhcos-ibi.iso "$(IBI_RHCOS_ISO_PATH)"
	sudo chmod a+r "$(IBI_RHCOS_ISO_PATH)"

.PHONY: ibi-iso-clean
ibi-iso-clean:
	-sudo rm -rf $(IBI_RHCOS_ISO_PATH) $(IBI_WORK_DIR) $(IB_CLI)

# Configure dhcp and dns for host
.PHONY: host-net-config
host-net-config:
	HOST_IP=$(IBI_VM_IP) \
	CLUSTER_NAME=$(IBI_CLUSTER_NAME) \
	BASE_DOMAIN=$(IBI_DOMAIN) \
	NET_NAME=$(IBI_NET_NAME) \
	HOST_NAME=$(IBI_VM_NAME) \
	HOST_MAC=$(IBI_VM_MAC) \
	$(SNO_DIR)/host-net-config.sh

.PHONY: ibi-vm
ibi-vm: target-network host-net-config ## Provision IBI VM
	RHCOS_ISO=$(IBI_RHCOS_ISO_PATH) \
	VM_NAME=$(IBI_VM_NAME) \
	NET_NAME=$(IBI_NET_NAME) \
	DISK_GB=$(IBI_DISK_SIZE) \
	CPU_CORE=$(IBI_VM_CPUS) \
	HOST_MAC=$(IBI_VM_MAC) \
	RAM_MB=$(IBI_VM_RAM_MB) \
	$(SNO_DIR)/virt-install-sno-iso-ign.sh

.PHONY: ibi-vm-remove
ibi-vm-remove: VM_NAME=$(IBI_VM_NAME)
ibi-vm-remove: vm-remove ## Remove IBI VM and the storage associated with it

.PHONY: logs
ibi-logs: ## Show logs of the IBI installation process
	echo "Waiting for $(IBI_VM_NAME) to be accessible"
	@until ssh $(SSH_FLAGS) core@$(IBI_VM_IP) true; do sleep 5; echo -n .; done; echo
	ssh $(SSH_FLAGS) core@$(IBI_VM_IP) "sudo journalctl -flu install-rhcos-and-restore-seed.service | stdbuf -o0 -e0 awk '{print \$$0 } /Finished SNO Image Based Installation./ { exit }'"

.PHONY: build-openshift-install
build-openshift-install: openshift-installer ## Build openshift-install binary
	cd openshift-installer && ./hack/build.sh

.PHONY: image-based-install-iso.yaml
image-based-install-iso.yaml: $(SSH_KEY_PRIV_PATH) ## Create image-based-install-iso.yaml
	$(info Creating IBI image-based-install-iso.yaml)
	@mkdir -p $(IBI_WORK_DIR)
	@< $(IBI_INSTALL_ISO_TEMPLATE) \
		RHCOS_LIVE_ISO_URL=$(IBI_RHCOS_LIVE_ISO_URL) \
		SEED_IMAGE=$(SEED_IMAGE) \
		SEED_VERSION=$(SEED_VERSION) \
		PULL_SECRET='$(PULL_SECRET)' \
		INSTALLATION_DISK=$(IBI_INSTALLATION_DISK) \
		SSH_KEY='$(shell cat $(SSH_KEY))' \
		envsubst > $(IBI_WORK_DIR)/image-based-install-iso.yaml

.PHONY: ibi-install-config
ibi-install-config: $(SSH_KEY_PRIV_PATH)
	$(info Creating IBI install-config.yaml)
	@mkdir -p $(IBI_WORK_DIR)
	@# CLUSTER_NETWORK and CLUSTER_SVC_NETWORK are ommited because they are not used (the ones from the seed image are used)
	@INSTALLER_WORKDIR=../$(IBI_WORK_DIR) \
	PULL_SECRET='$(PULL_SECRET)' \
	SSH_KEY=$(SSH_KEY) \
	INSTALLATION_DISK=$(IBI_INSTALLATION_DISK) \
	CLUSTER_NAME=$(IBI_CLUSTER_NAME) \
	BASE_DOMAIN=$(IBI_DOMAIN) \
	MACHINE_NETWORK=$(IBI_VM_NETWORK) \
		make -C $(SNO_DIR) ../$(IBI_WORK_DIR)/install-config.yaml

.PHONY: ibi-imagebased-config
ibi-imagebased-config:
	$(info Creating IBI imagebased-config.yaml)
	@mkdir -p $(IBI_WORK_DIR)
	@< $(IMAGEBASED_CONFIG_TEMPLATE) \
		VM_NAME=$(IBI_VM_NAME) \
		HOST_IP=$(IBI_VM_IP) \
		HOST_MAC=$(IBI_VM_MAC) \
		HOST_ROUTE=$(shell $(virsh) net-dumpxml $(IBI_NET_NAME) | grep '<ip ' | xargs -n1 | grep address | cut -d = -f 2) \
		RELEASE_REGISTRY=$(IBI_RELEASE_REGISTRY) \
		envsubst > $(IBI_WORK_DIR)/imagebased-config.yaml

.PHONY: imagebasedconfig.iso
imagebasedconfig.iso: RELEASE_VERSION=$(SEED_VERSION)
imagebasedconfig.iso: $(IBI_WORK_DIR)/imagebasedconfig.iso ## Create imagebasedconfig.iso using openshift-installer

.PHONY: $(IBI_WORK_DIR)/imagebasedconfig.iso
$(IBI_WORK_DIR)/imagebasedconfig.iso: RELEASE_VERSION=$(SEED_VERSION)
$(IBI_WORK_DIR)/imagebasedconfig.iso: ibi-install-config ibi-imagebased-config
	OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE=$(DEFAULT_RELEASE_IMAGE) $(OPENSHIFT_INSTALLER_BIN) imagebased create config-image --dir $(IBI_WORK_DIR)
	sudo cp $@ $(LIBVIRT_IMAGE_PATH)

.PHONY: ibi-attach-config.iso
ibi-attach-config.iso: ## Attach ibi-config.iso file to IBI VM
	$(virsh) change-media $(IBI_VM_NAME) --config sda $(LIBVIRT_IMAGE_PATH)/imagebasedconfig.iso

.PHONY: ibi-reboot
ibi-reboot: ## Reboot ibi VM
	$(virsh) reboot $(IBI_VM_NAME)

.PHONY: wait-for-ibi
wait-for-ibi: SNO_KUBECONFIG=$(IBI_KUBECONFIG)
wait-for-ibi: wait-for-install-complete ## Wait for IBI cluster to be healthy

.PHONY: ibi-reboot-wait
ibi-reboot-wait: ibi-reboot wait-for-ibi

# Delete generated files
.PHONY: ibi-clean
ibi-clean: ibi-vm-remove
	rm -fr credentials $(IBI_WORK_DIR)

# So vim treats this file as a makefile
# vim: set filetype=make:
